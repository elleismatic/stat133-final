return (length(grep("[^AEIOU[:punct:] ]", split_chars(str), ignore.case = TRUE)))
}
num_cons(fox)
"a""a"
b<-"a"
b<- paste(b, "b")
b
paste0(l in split_chars(str))
paste0(split_chars(str))
paste0(split_chars(str), "")
paste(split_chars(str), "")
class(paste(split_chars(str), ""))
reverse_chars <- function(str) {
rev <- c()
for (l in split_chars(str)) {
rev <- paste0(rev, l)
}
return (rev)
}
reverse_chars("gattaca")
reverse_chars <- function(str) {
rev <- c()
for (l in split_chars(str)) {
rev <- paste0(l, rev)
}
return (rev)
}
reverse_chars("gattaca")
reverse_chars("Lumox Maxima")
reverse_words <- function(str) {
rev <- c()
for (word in strsplit(str, " ")) {
rev <- paste0(word, rev)
}
return (rev)
}
reverse_words("sentence! this reverse")
strsplit(str, " ")
str = "sentence! this reverse"
strsplit(str, " ")
reverse_words <- function(str) {
rev <- c()
for (word in strsplit(str, " ")) {
rev <- paste(word, rev)
}
return (rev)
}
reverse_words("sentence! this reverse")
for (word in strsplit(str, " ")) {
print (word)
}
for (word in strsplit(str, " ")) {
rev <- paste(word, rev)
}
rev <- c()
for (word in strsplit(str, " ")) {
rev <- paste(word, rev)
}
rev
paste("hello", rev)
reverse_words <- function(str) {
rev <- c()
for (word in strsplit(str, " ")) {
rev <- c(word, " ", rev)
}
return (rev)
}
reverse_words("sentence! this reverse")
for (x in c(1, 2, 3)) {}
for (x in c(1, 2, 3)) { print(x)}
for (word in strsplit(str, " ")) {
rev <- paste(word, rev)
}
rev
reverse_words <- function(str) {
rev <- c()
for (word in strsplit(str, " ")[[1]]) {
rev <- c(word, " ", rev)
}
return (rev)
}
reverse_words("sentence! this reverse")
reverse_words <- function(str) {
rev <- c()
for (word in as.vector(strsplit(str, " ")[[1]])) {
rev <- c(word, " ", rev)
}
return (rev)
}
reverse_words("sentence! this reverse")
reverse_words <- function(str) {
rev <- c()
for (word in as.vector(strsplit(str, " ")[[1]])) {
rev <- c(word, rev)
}
return (rev)
}
reverse_words("sentence! this reverse")
reverse_words <- function(str) {
rev <- c()
for (word in as.vector(strsplit(str, " ")[[1]])) {
rev <- paste(word, rev)
}
return (rev)
}
reverse_words("sentence! this reverse")
reverse_words <- function(str) {
rev <- c()
for (word in as.vector(strsplit(str, " ")[[1]])) {
rev <- paste(word, rev)
}
return (substr(rev, 1, nchar(rev) - 1))
}
reverse_words("sentence! this reverse")
reverse_words("string")
grep("[i.*]{3,}", states, ignore.case = TRUE, value = TRUE)
grep("[AEIOU].{5}", states, ignore.case = TRUE, value = TRUE)
grep("[AEIOU]{5}", states, ignore.case = TRUE, value = TRUE)
grep("[AEIOU]*{5}", states, ignore.case = TRUE, value = TRUE)
grep("[i.*]{3,}", states, ignore.case = TRUE, value = TRUE)
grep("[i*]{3,}", states, ignore.case = TRUE, value = TRUE)
grep("[i]{3,}", states, ignore.case = TRUE, value = TRUE)
grep("i.*i*i", states, ignore.case = TRUE, value = TRUE)
grep("i*i*i", states, ignore.case = TRUE, value = TRUE)
grep("i.*i.*i", states, ignore.case = TRUE, value = TRUE)
grep("[i.*]i.*i.*", states, ignore.case = TRUE, value = TRUE)
grep("i.*i.*i.*", states, ignore.case = TRUE, value = TRUE)
grep("i.*{3,}", states, ignore.case = TRUE, value = TRUE)
grep("{3,}i.*", states, ignore.case = TRUE, value = TRUE)
grep(".*i.*{3,}", states, ignore.case = TRUE, value = TRUE)
grep(".*[i.*]{3,}", states, ignore.case = TRUE, value = TRUE)
grep("[.*][i.*]{3,}", states, ignore.case = TRUE, value = TRUE)
grep("[.*i.*]{3,}", states, ignore.case = TRUE, value = TRUE)
grep(".*[i].*{3,}", states, ignore.case = TRUE, value = TRUE)
grep(".*(i).*{3,}", states, ignore.case = TRUE, value = TRUE)
grep("[.*i.*]{3,}", states, ignore.case = TRUE, value = TRUE)
grep("(.*i.*){3,}", states, ignore.case = TRUE, value = TRUE)
grep("(.*[AEIOU].*){5}", states, ignore.case = TRUE, value = TRUE)
starts_with("Hello", 'H')  # TRUE
starts_with <- function(str, chr) {
return (tolower(substr(str, 1, 1)) == tolower(chr))
}
starts_with("Hello", 'H')  # TRUE
starts_with("Good morning", 'H')  # FALSE
ends_with <- function(str, chr) {
return (tolower(substr(str, nchar(str), nchar(str))) == tolower(chr))
}
ends_with("Hello", 'o')  # TRUE
ends_with("Good morning", 'o')  # FALSE
is_hex("#ff0000")  # TRUE
is_hex("#123456")  # TRUE
is_hex("#12Fb56")  # TRUE
is_hex("#1234GF")  # FALSE
is_hex <- function(input) {
return (nchar(input) == 7 & grepl("^#[[:xdigit:]]{6}", input))
}
is_hex("#ff0000")  # TRUE
is_hex("#123456")  # TRUE
is_hex("#12Fb56")  # TRUE
is_hex("#1234GF")  # FALSE
is_hex("#1234567") # FALSE
is_hex("blue")     # FALSE
is_hex_alpha <- function(input) {
return (nchar(input) == 9 & grepl("^#[[:xdigit:]]{6}", input))
}
is_hex_alpha("#FF000078")  # TRUE
is_hex_alpha("#FF0000")   # FALSE
hex_values <- function(xcol) {
ret <- c()
if (is_hex(xcol) | is_hex_alpha(xcol)) {
ret["red"] <- substr(xcol, 2, 3)
ret["green"] <- substr(xcol, 4, 5)
ret["blue"] <- substr(xcol, 6, 7)
if (nchar(xcol) > 7) {
ret["alpha"] <- substr(xcol, 8, 9)
}
}
if (length(ret) != 0) {
return (ret)
}
cat("input is not a valid hexadecimal color")
}
hex_values("#435690")
hex_values("#435XY90")
hex_values("#435690FF")
split_chars <- function(str) {
return (as.vector(strsplit(str, "")[[1]]))
}
split_chars('Go Bears!')
split_chars('Expecto Patronum')
num_vowels <- function(letrs) {
vowels <- c("a", "e", "i", "o", "u")
n <- c(0, 0, 0, 0, 0)
names(n) <- vowels
for (l in tolower(letrs)) {
if (l %in% vowels) {
switch(l,
"a" = n[1] <- n[1] + 1,
"e" = n[2] <- n[2] + 1,
"i" = n[3] <- n[3] + 1,
"o" = n[4] <- n[4] + 1,
"u" = n[5] <- n[5] + 1)
}
}
return (n)
}
vec <- c('G', 'o', ' ', 'B', 'e', 'a', 'r', 's', '!')
num_vowels(vec)
grep("(.*[AEIOU].*){5}", states, ignore.case = TRUE, value = TRUE)
beta <- read.csv("~/Documents/UC\ Berkeley\ 2015-2016/Statistics\ 133/projects/final/total_beta.csv", header = TRUE)
pe <- read.csv("~/Documents/UC\ Berkeley\ 2015-2016/Statistics\ 133/projects/final/PE_data.csv", header = TRUE)
beta <- read.csv("~/Documents/UC\ Berkeley\ 2015-2016/Statistics\ 133/projects/final/total_beta.csv", header = TRUE)
pe <- read.csv("~/Documents/UC\ Berkeley\ 2015-2016/Statistics\ 133/projects/final/PE_data.csv", header = TRUE)
new <- merge(beta, pe, by = intersect(names(beta), names(pe)))
plot(new$Current.PE, new$Forward.PE)
View(beta)
View(pe)
View(new)
library(ggplot2)
dev.off()
class(raw_data)
raw_data <- merge(beta, pe, by = intersect(names(beta), names(pe)))
class(raw_data)
geom_line(aes(x = PEG.Ratio, y = Expected.growth...next.5.years))
ggplot(data = raw_data) +
geom_line(aes(x = PEG.Ratio, y = Expected.growth...next.5.years))
ggplot(data = raw_data) +
geom_line(aes(x = PEG.Ratio, y = Expected.growth...next.5.years))
raw_data$Expected.growth...next.5.years
class(raw_data$Expected.growth...next.5.years)
str(raw_data)
str(raw_data)
?apply
length(raw_data$Expected.growth...next.5.years)
raw_data$Expected.growth...next.5.years[1]
raw_data$Expected.growth...next.5.years[1] <- 1%
raw_data$Expected.growth...next.5.years[1] <- "1%"
raw_data$Expected.growth...next.5.years[1] <- "-23.28%"
raw_data$Expected.growth...next.5.years[1]
raw_data$Expected.growth...next.5.years <- as.vector(raw_data$Expected.growth...next.5.years)
raw_data$Expected.growth...next.5.years
raw_data$Expected.growth...next.5.years <- as.vector(raw_data$Expected.growth...next.5.years)
for (i in 1:length(raw_data$Expected.growth...next.5.years)) {
raw_data$Expected.growth...next.5.years[i] <- as.numeric(gsub("%", "", raw_data$Expected.growth...next.5.years[i]))
}
ggplot(data = raw_data) +
geom_line(aes(x = PEG.Ratio, y = Expected.growth...next.5.years))
plot(raw_data$Expected.growth...next.5.years, raw_data$PEG.Ratio)
plot(raw_data$PEG.Ratio, raw_data$Expected.growth...next.5.years)
plot(raw_data$Current.PE, raw_data$Expected.growth...next.5.years)
beta <- read.csv("~/Documents/UC\ Berkeley\ 2015-2016/Statistics\ 133/projects/final/total_beta.csv", header = TRUE)
pe <- read.csv("~/Documents/UC\ Berkeley\ 2015-2016/Statistics\ 133/projects/final/PE_data.csv", header = TRUE)
raw_data <- merge(beta, pe, by = intersect(names(beta), names(pe)))
str(raw_data)
raw_data$Expected.growth...next.5.years <- as.vector(raw_data$Expected.growth...next.5.years)
for (i in 1:length(raw_data$Expected.growth...next.5.years)) {
raw_data$Expected.growth...next.5.years[i] <- as.numeric(gsub("%", "", raw_data$Expected.growth...next.5.years[i]))
}
plot(raw_data$Current.PE, raw_data$Expected.growth...next.5.years)
density(raw_data$Current.PE, raw_data$Expected.growth...next.5.years)
plot(density(raw_data$Current.PE), density(raw_data$Expected.growth...next.5.years))
plot(density(raw_data$Current.PE))
plot(density(raw_data$Expected.growth...next.5.years))
plot(density(raw_data$Expected.growth...next.5.years))
str(raw_data)
raw_data$Expected.growth...next.5.years <- as.vector(raw_data$Expected.growth...next.5.years)
for (i in 1:length(raw_data$Expected.growth...next.5.years)) {
raw_data$Expected.growth...next.5.years[i] <- as.numeric(gsub("%", "", raw_data$Expected.growth...next.5.years[i]))
}
str(raw_data)
as.numeric("13.1")
class(as.numeric("13.01"))
raw_data$Expected.growth...next.5.years <- as.numeric(raw_data$Expected.growth...next.5.years)
str(raw_data)
raw_data$Expected.growth...next.5.years <- as.vector(raw_data$Expected.growth...next.5.years)
for (i in 1:length(raw_data$Expected.growth...next.5.years)) {
raw_data$Expected.growth...next.5.years[i] <- gsub("%", "", raw_data$Expected.growth...next.5.years[i])
}
raw_data$Expected.growth...next.5.years <- as.numeric(raw_data$Expected.growth...next.5.years)
str(raw_data)
plot(density(raw_data$Expected.growth...next.5.years))
View(raw_data)
raw_data$Expected.growth...next.5.years["Unclassified"]
no_na <- raw_data[-"Unclassified",]
View(raw_data)
no_na
no_na <- raw_data[-"Unclassified",]
no_na <- raw_data[-c("Unclassified"),]
no_na <- raw_data[c(-"Unclassified"),]
no_na <- raw_data[c(-"Unclassified")]
raw_data["Unclassified"]
raw_data["Unclassified",]
raw_data[-1,]
raw_data[-96,]
raw_data["Unclassified",]
View(raw_data)
row(raw_data["Unclassified",])
??index
row(raw_data)
rownames(raw_data)
raw_data(raw_data["Industry" == "Unclassified",])
raw_data[raw_data["Industry" == "Unclassified",]]
raw_data["Industry" == "Unclassified",]
raw_data("Industry" == "Unclassified",)
raw_data["Industry" == "Unclassified",]
raw_data["Industry" == "Unclassified"]
raw_data$Industry == "Unclassified"
raw_data(raw_data$Industry == "Unclassified")
raw_data[raw_data$Industry == "Unclassified"]
raw_data[raw_data$Industry == "Unclassified",]
rowname(raw_data$Industry == "Unclassified")
index(raw_data$Industry == "Unclassified")
??index
which(raw_data$Industry == "Unclassified")
raw_data[-which(raw_data$Industry == "Unclassified"),]
no_unclassified <- raw_data[-which(raw_data$Industry == "Unclassified"),]
plot(density(raw_data$Current.PE))
plot(density(raw_data$Expected.growth...next.5.years))
plot(density(no_na$Expected.growth...next.5.years))
plot(density(no_na$Current.PE))
plot(density(no_unclassified$Expected.growth...next.5.years))
plot(density(no_unclassified$Current.PE))
plot(density(no_unclassified$Current.PE),density(no_unclassified$Expected.growth...next.5.years))
plot(density(no_unclassified$Expected.growth...next.5.years))
View(beta)
raw_data$Expected.growth-next.5.years <- raw_data$Expected.growth...next.5.years
raw_data$Expected.growth.in.next.5.years <- raw_data$Expected.growth...next.5.years
raw_data$Expected.growth...next.5.years <- NULL
library(ggplot2)
dev.off()
ggplot(data = raw_data) +
geom_line(aes(x = PEG.Ratio, y = Expected.growth.in.next.5.years))
ggplot(data = raw_data) +
geom_line(aes(x = Current.PE, y = Expected.growth.in.next.5.years))
symbols(no_unclassified$Current.PE, no_unclassified$Expected.growth.in.next.5.years,
circles = no_unclassified$Industry)
symbols(no_unclassified$Current.PE, no_unclassified$Expected.growth.in.next.5.years,
circles = no_unclassified$Number.of.firms)
text(no_unclassified$Current.PE, no_unclassified$Expected.growth.in.next.5.years,
circles = no_unclassified$Number.of.firms)
symbols(no_unclassified$Current.PE, no_unclassified$Expected.growth.in.next.5.years,
circles = no_unclassified$Number.of.firms)
text(no_unclassified$Current.PE, no_unclassified$Expected.growth.in.next.5.years,
circles = no_unclassified$Number.of.firms)
symbols(no_unclassified$Current.PE, no_unclassified$Expected.growth.in.next.5.years,
circles = no_unclassified$Number.of.firms)
text(no_unclassified$Current.PE, no_unclassified$Expected.growth.in.next.5.years,
cex = 0.2)
symbols(no_unclassified$Current.PE, no_unclassified$Expected.growth.in.next.5.years,
circles = no_unclassified$Number.of.firms)
text(no_unclassified$Current.PE, no_unclassified$Expected.growth.in.next.5.years,
cex = 0.2)
symbols(no_unclassified$Current.PE, no_unclassified$Expected.growth.in.next.5.years,
circles = no_unclassified$Number.of.firms, inches=0.35, fg="white",
bg="pink", xlab="Current PE", ylab="Expected Growth in 5 Years")
text(no_unclassified$Current.PE, no_unclassified$Expected.growth.in.next.5.years,
cex = 0.2)
symbols(no_unclassified$Current.PE, no_unclassified$Expected.growth.in.next.5.years,
circles = no_unclassified$Number.of.firms, inches=0.5, fg="white",
bg="pink", xlab="Current PE", ylab="Expected Growth in 5 Years")
symbols(no_unclassified$Current.PE, no_unclassified$Expected.growth.in.next.5.years,
circles = no_unclassified$Number.of.firms, fg="white",
bg="pink", xlab="Current PE", ylab="Expected Growth in 5 Years")
symbols(industries_only$Current.PE, industries_only$Expected.growth.in.next.5.years,
circles = industries_only$Number.of.firms, fg="white",
bg="pink", xlab="Current PE", ylab="Expected Growth in 5 Years")
text(industries_only$Current.PE, industries_only$Expected.growth.in.next.5.years,
cex = 0.2)
symbols(industries_only$Current.PE, industries_only$Expected.growth.in.next.5.years,
circles = industries_only$Number.of.firms, fg="white",
bg="pink", xlab="Current PE", ylab="Expected Growth in 5 Years")
industries_only <- raw_data[-which(raw_data$Industry == "Unclassified" | raw_data$Industry == "Total Market"),]
symbols(industries_only$Current.PE, industries_only$Expected.growth.in.next.5.years,
circles = industries_only$Number.of.firms, fg="white",
bg="pink", xlab="Current PE", ylab="Expected Growth in 5 Years")
text(industries_only$Current.PE, industries_only$Expected.growth.in.next.5.years,
cex = 0.2)
?symbols
symbols(industries_only$Current.PE, industries_only$Expected.growth.in.next.5.years,
circles = industries_only$Number.of.firms, fg="white",
bg=rgba(255,204,204,0.3), xlab="Current PE", ylab="Expected Growth in 5 Years")
text(industries_only$Current.PE, industries_only$Expected.growth.in.next.5.years,
cex = 0.2)
symbols(industries_only$Current.PE, industries_only$Expected.growth.in.next.5.years,
circles = industries_only$Number.of.firms, fg="white",
bg=rgba(255,204,204,0.3), xlab="Current PE", ylab="Expected Growth in 5 Years")
symbols(industries_only$Current.PE, industries_only$Expected.growth.in.next.5.years,
circles = industries_only$Number.of.firms, fg="white",
bg=rgba(255,204,204,0.5), xlab="Current PE", ylab="Expected Growth in 5 Years")
?rgba
??rgba
??rgb
??alpha
symbols(industries_only$Current.PE, industries_only$Expected.growth.in.next.5.years,
circles = industries_only$Number.of.firms, fg="white",
bg=alpha(rgb(255,204,204),0.5), xlab="Current PE", ylab="Expected Growth in 5 Years")
text(industries_only$Current.PE, industries_only$Expected.growth.in.next.5.years,
cex = 0.2)
?alpha
alpha("red", 0.1)
symbols(industries_only$Current.PE, industries_only$Expected.growth.in.next.5.years,
circles = industries_only$Number.of.firms, fg="white",
bg=rgb(255,204,204), xlab="Current PE", ylab="Expected Growth in 5 Years")
text(industries_only$Current.PE, industries_only$Expected.growth.in.next.5.years,
cex = 0.2)
symbols(industries_only$Current.PE, industries_only$Expected.growth.in.next.5.years,
circles = industries_only$Number.of.firms, fg="white",
bg="pink", xlab="Current PE", ylab="Expected Growth in 5 Years")
text(industries_only$Current.PE, industries_only$Expected.growth.in.next.5.years,
cex = 0.2)
symbols(industries_only$Current.PE, industries_only$Expected.growth.in.next.5.years,
circles = industries_only$Number.of.firms, inches=0.35 fg="white",
bg="pink", xlab="Current PE", ylab="Expected Growth in 5 Years")
text(industries_only$Current.PE, industries_only$Expected.growth.in.next.5.years,
symbols(industries_only$Current.PE, industries_only$Expected.growth.in.next.5.years,
circles = industries_only$Number.of.firms, inches=0.35, fg="white",
bg="pink", xlab="Current PE", ylab="Expected Growth in 5 Years")
text(industries_only$Current.PE, industries_only$Expected.growth.in.next.5.years,
cex = 0.2)
symbols(industries_only$Current.PE, industries_only$Expected.growth.in.next.5.years,
circles = industries_only$Number.of.firms, inches=0.35, fg="white",
bg="pink", xlab="Current PE", ylab="Expected Growth in 5 Years")
text(industries_only$Current.PE, industries_only$Expected.growth.in.next.5.years,
cex = 0.2)
ggplot(data = raw_data) +
geom_line(aes(x = Current.PE, y = Expected.growth.in.next.5.years))
ggplot(data = raw_data) +
geom_line(aes(x = Current.PE, y = Expected.growth.in.next.5.years))
library(ggplot2)
dev.off()
beta <- read.csv("~/Documents/UC\ Berkeley\ 2015-2016/Statistics\ 133/projects/final/total_beta.csv", header = TRUE)
pe <- read.csv("~/Documents/UC\ Berkeley\ 2015-2016/Statistics\ 133/projects/final/PE_data.csv", header = TRUE)
beta <- read.csv("http://people.stern.nyu.edu/adamodar/New_Home_Page/datafile/pedata.html", header = TRUE)
beta <- read.csv("http://people.stern.nyu.edu/adamodar/New_Home_Page/datafile/totalbeta.html", header = TRUE)
pe <- read.csv("http://people.stern.nyu.edu/adamodar/New_Home_Page/datafile/pedata.html", header = TRUE)
raw_data <- merge(beta, pe, by = intersect(names(beta), names(pe)))
str(raw_data)
View(beta)
beta <- read.csv("http://www.stern.nyu.edu/~adamodar/pc/datasets/totalbeta.xls", header = TRUE)
pe <- read.csv("http://www.stern.nyu.edu/~adamodar/pc/datasets/pedata.xls", header = TRUE)
beta <- read.csv("http://www.stern.nyu.edu/~adamodar/pc/datasets/totalbeta.xls", header = TRUE)
beta <- read.csv("~/Documents/UC\ Berkeley\ 2015-2016/Statistics\ 133/projects/final/total_beta.csv", header = TRUE)
pe <- read.csv("~/Documents/UC\ Berkeley\ 2015-2016/Statistics\ 133/projects/final/PE_data.csv", header = TRUE)
beta <- read.csv("~/Documents/UC\ Berkeley\ 2015-2016/Statistics\ 133/projects/final/raw_data/total_beta.csv", header = TRUE,  stringsAsFactors = FALSE)
pe <- read.csv("~/Documents/UC\ Berkeley\ 2015-2016/Statistics\ 133/projects/final/raw_data/pe_data.csv", header = TRUE, stringsAsFactors = FALSE)
raw_data <- merge(beta, pe, by = intersect(names(beta), names(pe)))
head(raw_data)
summary(raw_data)
names(raw_data)
str(raw_data)
raw_data$Average.correlation <- as.vector(raw_data$Average.correlation)
for (i in 1:length(raw_data$Average.correlation)) {
raw_data$Average.correlation[i] <- gsub("%", "", raw_data$Average.correlation[i])
}
raw_data$Average.correlation <- as.numeric(raw_data$Average.correlation)
raw_data$Expected.growth.in.next.5.years <- as.vector(raw_data$Expected.growth.in.next.5.years)
for (i in 1:length(raw_data$Expected.growth.in.next.5.years)) {
raw_data$Expected.growth.in.next.5.years[i] <- gsub("%", "", raw_data$Expected.growth.in.next.5.years[i])
}
raw_data$Expected.growth.in.next.5.years <- as.numeric(raw_data$Expected.growth.in.next.5.years)
View(raw_data)
raw_data <- subset(raw_data, select = -X)
raw_data$Expected.growth.in.next.5.years <- raw_data$Expected.growth...next.5.years
raw_data$Expected.growth...next.5.years <- subset(raw_data, select = -Expected.growth...next.5.years)
raw_data$Expected.growth.in.next.5.years <- as.vector(raw_data$Expected.growth.in.next.5.years)
for (i in 1:length(raw_data$Expected.growth.in.next.5.years)) {
raw_data$Expected.growth.in.next.5.years[i] <- gsub("%", "", raw_data$Expected.growth.in.next.5.years[i])
}
raw_data$Expected.growth.in.next.5.years <- as.numeric(raw_data$Expected.growth.in.next.5.years)
str(raw_data)
raw_data$Expected.growth...next.5.years <- NULL
str(raw_data)
as.factor(raw_data$Industry)
clean_data <- raw_data[-which(raw_data$Industry == "Unclassified"),]
industries_only <- raw_data[-which(raw_data$Industry == "Unclassified" | raw_data$Industry == "Total Market"),]
setwd("~/Documents/UC\ Berkeley\ 2015-2016/Statistics\ 133/projects/final")
file.create("clean_data/clean_data.csv")
write.csv(clean_data, file = "clean_data/clean_data.csv")
file.create("clean_data/industries_only.csv")
write.csv(industries_only, file = "clean_data/industries_only.csv")
str(raw_data)
beta <- read.csv("~/Documents/UC\ Berkeley\ 2015-2016/Statistics\ 133/projects/final/raw_data/total_beta.csv", header = TRUE,  stringsAsFactors = FALSE)
pe <- read.csv("~/Documents/UC\ Berkeley\ 2015-2016/Statistics\ 133/projects/final/raw_data/pe_data.csv", header = TRUE, stringsAsFactors = FALSE)
raw_data <- merge(beta, pe, by = intersect(names(beta), names(pe)))
head(raw_data)
summary(raw_data)
names(raw_data)
str(raw_data)
clean_data <- subset(raw_data, select = -X)
clean_data$Expected.growth.in.next.5.years <- clean_data$Expected.growth...next.5.years
clean_data$Expected.growth...next.5.years <- NULL
clean_data$Aggregate.Mkt.Cap.Net.Income <- clean_data$Aggregate.Mkt.Cap..Net.Income
clean_data$Aggregate.Mkt.Cap..Net.Income <- NULL
clean_data$Aggregate.Mkt.Cap.Trailing.Net.Income <- clean_data$Aggregate.Mkt.Cap..Trailing.Net.Income
clean_data$Aggregate.Mkt.Cap..Trailing.Net.Income <- NULL
clean_data$Average.correlation <- as.vector(clean_data$Average.correlation)
for (i in 1:length(clean_data$Average.correlation)) {
clean_data$Average.correlation[i] <- gsub("%", "", clean_data$Average.correlation[i])
}
clean_data$Average.correlation <- as.numeric(clean_data$Average.correlation)
clean_data$Expected.growth.in.next.5.years <- as.vector(clean_data$Expected.growth.in.next.5.years)
for (i in 1:length(clean_data$Expected.growth.in.next.5.years)) {
clean_data$Expected.growth.in.next.5.years[i] <- gsub("%", "", clean_data$Expected.growth.in.next.5.years[i])
}
clean_data$Expected.growth.in.next.5.years <- as.numeric(clean_data$Expected.growth.in.next.5.years)
clean_data <- clean_data[-which(clean_data$Industry == "Unclassified"),]
industries_only <- clean_data[-which(clean_data$Industry == "Unclassified" | clean_data$Industry == "Total Market"),]
setwd("~/Documents/UC\ Berkeley\ 2015-2016/Statistics\ 133/projects/final")
file.create("clean_data/clean_data.csv")
write.csv(clean_data, file = "clean_data/clean_data.csv")
file.create("clean_data/industries_only.csv")
write.csv(industries_only, file = "clean_data/industries_only.csv")
